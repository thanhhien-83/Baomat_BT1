#include <bits/stdc++.h>
using namespace std;

// üîë T·∫°o ma tr·∫≠n kh√≥a 5x5 cho Playfair
vector<vector<char>> generateKeyMatrix(string key) {
    // X·ª≠ l√Ω: lo·∫°i b·ªè ch·ªØ tr√πng l·∫∑p, ƒë·ªïi 'J' th√†nh 'I'
    vector<bool> used(26, false);
    vector<vector<char>> matrix(5, vector<char>(5));
    string newKey = "";

    for (char c : key) {
        if (isalpha(c)) {
            c = toupper(c);
            if (c == 'J') c = 'I'; // Quy ∆∞·ªõc: J = I
            if (!used[c - 'A']) {
                newKey += c;
                used[c - 'A'] = true;
            }
        }
    }

    // Th√™m c√°c k√Ω t·ª± c√≤n l·∫°i c·ªßa b·∫£ng ch·ªØ c√°i
    for (char c = 'A'; c <= 'Z'; c++) {
        if (c == 'J') continue; // b·ªè J v√¨ ƒë√£ g·ªôp v·ªõi I
        if (!used[c - 'A']) {
            newKey += c;
            used[c - 'A'] = true;
        }
    }

    // ƒêi·ªÅn v√†o ma tr·∫≠n 5x5
    int k = 0;
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            matrix[i][j] = newKey[k++];
        }
    }
    return matrix;
}

// üîç T√¨m v·ªã tr√≠ c·ªßa k√Ω t·ª± trong ma tr·∫≠n
pair<int,int> findPosition(vector<vector<char>>& matrix, char c) {
    if (c == 'J') c = 'I'; // quy ∆∞·ªõc I = J
    c = toupper(c);
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if (matrix[i][j] == c) return {i, j};
        }
    }
    return {-1,-1};
}

// ‚úèÔ∏è Chu·∫©n b·ªã vƒÉn b·∫£n: chia th√†nh t·ª´ng c·∫∑p (digraph)
string prepareText(string text) {
    string result = "";
    for (char c : text) {
        if (isalpha(c)) result += toupper(c);
    }
    // Th√™m X n·∫øu 2 ch·ªØ c√°i li·ªÅn nhau gi·ªëng nhau ho·∫∑c n·∫øu ƒë·ªô d√†i l·∫ª
    string prepared = "";
    for (int i = 0; i < result.size(); i++) {
        prepared += result[i];
        if (i + 1 < result.size() && result[i] == result[i+1]) {
            prepared += 'X'; // ch√®n X n·∫øu tr√πng
        }
    }
    if (prepared.size() % 2 != 0) prepared += 'X'; // th√™m X n·∫øu l·∫ª
    return prepared;
}

// üîí M√£ h√≥a Playfair
string playfairEncrypt(string text, vector<vector<char>>& matrix) {
    string prepared = prepareText(text);
    string result = "";

    for (int i = 0; i < prepared.size(); i += 2) {
        char a = prepared[i];
        char b = prepared[i+1];
        auto [r1, c1] = findPosition(matrix, a);
        auto [r2, c2] = findPosition(matrix, b);

        if (r1 == r2) {
            // C√πng h√†ng ‚Üí l·∫•y k√Ω t·ª± b√™n ph·∫£i
            result += matrix[r1][(c1+1)%5];
            result += matrix[r2][(c2+1)%5];
        } else if (c1 == c2) {
            // C√πng c·ªôt ‚Üí l·∫•y k√Ω t·ª± b√™n d∆∞·ªõi
            result += matrix[(r1+1)%5][c1];
            result += matrix[(r2+1)%5][c2];
        } else {
            // H√¨nh ch·ªØ nh·∫≠t ‚Üí l·∫•y k√Ω t·ª± c√πng h√†ng, c·ªôt ƒë·ªëi di·ªán
            result += matrix[r1][c2];
            result += matrix[r2][c1];
        }
    }
    return result;
}

// üîì Gi·∫£i m√£ Playfair
string playfairDecrypt(string text, vector<vector<char>>& matrix) {
    string result = "";

    for (int i = 0; i < text.size(); i += 2) {
        char a = text[i];
        char b = text[i+1];
        auto [r1, c1] = findPosition(matrix, a);
        auto [r2, c2] = findPosition(matrix, b);

        if (r1 == r2) {
            // C√πng h√†ng ‚Üí l·∫•y k√Ω t·ª± b√™n tr√°i
            result += matrix[r1][(c1+4)%5];
            result += matrix[r2][(c2+4)%5];
        } else if (c1 == c2) {
            // C√πng c·ªôt ‚Üí l·∫•y k√Ω t·ª± b√™n tr√™n
            result += matrix[(r1+4)%5][c1];
            result += matrix[(r2+4)%5][c2];
        } else {
            // H√¨nh ch·ªØ nh·∫≠t ‚Üí l·∫•y k√Ω t·ª± c√πng h√†ng, c·ªôt ƒë·ªëi di·ªán
            result += matrix[r1][c2];
            result += matrix[r2][c1];
        }
    }
    return result;
}

int main() {
    string plainText, key;

    cout << "=== Playfair Cipher ===\n";
    cout << "Nhap van ban goc: ";
    getline(cin, plainText);

    cout << "Nhap khoa (chuoi ky tu): ";
    getline(cin, key);

    // T·∫°o ma tr·∫≠n kh√≥a 5x5
    auto keyMatrix = generateKeyMatrix(key);

    // In ma tr·∫≠n kh√≥a
    cout << "\nMa tran khoa (5x5):\n";
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            cout << keyMatrix[i][j] << " ";
        }
        cout << endl;
    }

    // M√£ h√≥a
    string cipherText = playfairEncrypt(plainText, keyMatrix);
    cout << "\nVan ban da ma hoa: " << cipherText << endl;

    // Gi·∫£i m√£
    string decryptedText = playfairDecrypt(cipherText, keyMatrix);
    cout << "Van ban da giai ma: " << decryptedText << endl;

    return 0;
}
